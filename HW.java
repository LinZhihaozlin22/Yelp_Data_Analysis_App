/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HW;

import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.*;
import java.util.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.sql.Date;
import java.io.*;
import java.sql.Date;
import java.util.logging.Logger;


/**
 *
 * @author linzhihao
 */
public class HW extends javax.swing.JFrame {
    private static Connection con = null;
    private static Set<String> Category_Set = new HashSet<>();
    private static Set<String> SubCategory_Set = new HashSet<>();
    private static Set<String> Attribute_Set = new HashSet<>();
    private static Boolean isB = true;
    private static Boolean ListenerHasCreated = false;
    /**
     * Creates new form HW
     */
    public HW() {
        initComponents();
        try {
            Start();
        } catch (SQLException ex) {
            Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void Start() throws SQLException, ClassNotFoundException {
        con = ConnectDB();
        System.out.println("Program start. Loading Category...");
        PreparedStatement stmt = con.prepareStatement("SELECT DISTINCT CATEGORY FROM CATEGORIES ORDER BY CATEGORY");
        ResultSet result = stmt.executeQuery();
        while(result.next()){
            String Category = result.getString(result.findColumn("Category"));
            JCheckBox categoryBox = new JCheckBox(Category);
            categoryBox.addMouseListener(new MouseListener(){
                @Override
                public void mouseClicked(MouseEvent arg0) {
                    JCheckBox box = (JCheckBox) arg0.getSource();
                    if(box.isSelected()){
                        Category_Set.add(box.getText());
                        System.out.println("now");
                    }
                    else{
                        Category_Set.remove(box.getText());
                        System.out.println("now");
                    }
                }

                @Override
                public void mousePressed(MouseEvent arg0) {
                }

                @Override
                public void mouseReleased(MouseEvent arg0) {
                }

                @Override
                public void mouseEntered(MouseEvent arg0) {
                }

                @Override
                public void mouseExited(MouseEvent arg0) {
                }
                
            });
            MainCatePanel.add(categoryBox);
        }
        result.close();
        stmt.close();
    }
    
    public static Connection ConnectDB() throws SQLException, ClassNotFoundException{
        System.out.println("Connecting to Database...");
        Class.forName("oracle.jdbc.driver.OracleDriver");
        return DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system", "oracle");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        BusinessPanel = new javax.swing.JPanel();
        CategoryPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        GetSubCategoryButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MainCatePanel = new javax.swing.JPanel();
        SubCategoryPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        GetAttributeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SubCatePanel = new javax.swing.JPanel();
        AttributePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        AttrPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        ReviewPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        VotesPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        VotesComboBox = new javax.swing.JComboBox<>();
        VotesTextField = new javax.swing.JTextField();
        FromToPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        FromTextField = new javax.swing.JTextField();
        ToTextField = new javax.swing.JTextField();
        StarPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        StarComboBox = new javax.swing.JComboBox<>();
        StarTextField = new javax.swing.JTextField();
        UserPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        TextFieldMemberSince = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        ReviewCountComboBox = new javax.swing.JComboBox<>();
        jPanel14 = new javax.swing.JPanel();
        TextFieldReviewCount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        NumberFriendsComboBox = new javax.swing.JComboBox<>();
        jPanel13 = new javax.swing.JPanel();
        TextFieldNumberFriends = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        AverageStarsComboBox = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        AverageStarsTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        NumberVotesComboBox = new javax.swing.JComboBox<>();
        jPanel16 = new javax.swing.JPanel();
        TextFieldNumberVotes = new javax.swing.JTextField();
        ResultScrollPane = new javax.swing.JScrollPane();
        ResultTable = new javax.swing.JTable();
        BusinessQueryButton = new javax.swing.JButton();
        UserQueryButton = new javax.swing.JButton();
        BusinessComboBox = new javax.swing.JComboBox<>();
        UserComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 800));

        mainPanel.setBackground(new java.awt.Color(204, 204, 204));
        mainPanel.setPreferredSize(new java.awt.Dimension(1200, 800));
        mainPanel.setSize(new java.awt.Dimension(1200, 800));

        BusinessPanel.setMaximumSize(new java.awt.Dimension(591, 355));
        BusinessPanel.setMinimumSize(new java.awt.Dimension(590, 350));
        BusinessPanel.setPreferredSize(new java.awt.Dimension(591, 355));
        BusinessPanel.setLayout(new java.awt.GridLayout(1, 0));

        CategoryPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Category");
        CategoryPanel.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        GetSubCategoryButton.setText("Get SubCategory");
        GetSubCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetSubCategoryButtonActionPerformed(evt);
            }
        });
        CategoryPanel.add(GetSubCategoryButton, java.awt.BorderLayout.PAGE_END);

        MainCatePanel.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(MainCatePanel);

        CategoryPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        BusinessPanel.add(CategoryPanel);

        SubCategoryPanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sub-category");
        SubCategoryPanel.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        GetAttributeButton.setText("Get Attribute");
        GetAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetAttributeButtonActionPerformed(evt);
            }
        });
        SubCategoryPanel.add(GetAttributeButton, java.awt.BorderLayout.PAGE_END);

        SubCatePanel.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane2.setViewportView(SubCatePanel);

        SubCategoryPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        BusinessPanel.add(SubCategoryPanel);

        AttributePanel.setMinimumSize(new java.awt.Dimension(140, 39));
        AttributePanel.setPreferredSize(new java.awt.Dimension(150, 49));
        AttributePanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Attribute");
        AttributePanel.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        AttrPanel.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane4.setViewportView(AttrPanel);

        AttributePanel.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(210, 29));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        AttributePanel.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        BusinessPanel.add(AttributePanel);

        ReviewPanel.setBackground(new java.awt.Color(204, 204, 204));
        ReviewPanel.setPreferredSize(new java.awt.Dimension(543, 294));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Review Search");

        VotesPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel14.setText("Votes");

        VotesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=" }));

        javax.swing.GroupLayout VotesPanelLayout = new javax.swing.GroupLayout(VotesPanel);
        VotesPanel.setLayout(VotesPanelLayout);
        VotesPanelLayout.setHorizontalGroup(
            VotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VotesPanelLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel14)
                .addGap(33, 33, 33)
                .addComponent(VotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(VotesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        VotesPanelLayout.setVerticalGroup(
            VotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VotesPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(VotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(VotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VotesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FromToPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel11.setText("From");

        jLabel12.setText("To");

        FromTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FromTextField.setText("YYYY-MM-DD");

        ToTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ToTextField.setText("YYYY-MM-DD");

        javax.swing.GroupLayout FromToPanelLayout = new javax.swing.GroupLayout(FromToPanel);
        FromToPanel.setLayout(FromToPanelLayout);
        FromToPanelLayout.setHorizontalGroup(
            FromToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FromToPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(ToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        FromToPanelLayout.setVerticalGroup(
            FromToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FromToPanelLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(FromToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(FromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        StarPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel13.setText("Star");

        StarComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=" }));

        javax.swing.GroupLayout StarPanelLayout = new javax.swing.GroupLayout(StarPanel);
        StarPanel.setLayout(StarPanelLayout);
        StarPanelLayout.setHorizontalGroup(
            StarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StarPanelLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel13)
                .addGap(35, 35, 35)
                .addComponent(StarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(StarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        StarPanelLayout.setVerticalGroup(
            StarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StarPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(StarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(StarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ReviewPanelLayout = new javax.swing.GroupLayout(ReviewPanel);
        ReviewPanel.setLayout(ReviewPanelLayout);
        ReviewPanelLayout.setHorizontalGroup(
            ReviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReviewPanelLayout.createSequentialGroup()
                .addGroup(ReviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VotesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ReviewPanelLayout.createSequentialGroup()
                .addGroup(ReviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FromToPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(StarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ReviewPanelLayout.setVerticalGroup(
            ReviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReviewPanelLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addGap(0, 0, 0)
                .addComponent(FromToPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VotesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        UserPanel.setBackground(new java.awt.Color(204, 204, 204));
        UserPanel.setPreferredSize(new java.awt.Dimension(630, 342));
        UserPanel.setLayout(new java.awt.BorderLayout());

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("User Search");
        UserPanel.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setLayout(new java.awt.GridLayout(5, 3));

        jLabel5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Member Since");
        jPanel5.add(jLabel5);

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));

        TextFieldMemberSince.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextFieldMemberSince.setText("YYYY-MM-DD");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(TextFieldMemberSince, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(11, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(TextFieldMemberSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        jPanel5.add(jPanel7);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel6);

        jLabel6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Review Count");
        jPanel5.add(jLabel6);

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));

        ReviewCountComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=" }));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ReviewCountComboBox, 0, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(ReviewCountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        jPanel5.add(jPanel9);

        jPanel14.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(TextFieldReviewCount, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(11, Short.MAX_VALUE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(TextFieldReviewCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        jPanel5.add(jPanel14);

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Number of Friends");
        jPanel5.add(jLabel7);

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));

        NumberFriendsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=" }));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NumberFriendsComboBox, 0, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(NumberFriendsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel11);

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(TextFieldNumberFriends, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(12, Short.MAX_VALUE)))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(TextFieldNumberFriends, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        jPanel5.add(jPanel13);

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Average Stars");
        jPanel5.add(jLabel8);

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));

        AverageStarsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=" }));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AverageStarsComboBox, 0, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(AverageStarsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel12);

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(AverageStarsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(12, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(AverageStarsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        jPanel5.add(jPanel8);

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Number of Votes");
        jPanel5.add(jLabel9);

        jPanel15.setBackground(new java.awt.Color(204, 204, 204));

        NumberVotesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=" }));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NumberVotesComboBox, 0, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(NumberVotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel15);

        jPanel16.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel16Layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(TextFieldNumberVotes, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(11, Short.MAX_VALUE)))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel16Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(TextFieldNumberVotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        jPanel5.add(jPanel16);

        UserPanel.add(jPanel5, java.awt.BorderLayout.CENTER);

        ResultScrollPane.setBorder(null);

        ResultScrollPane.setViewportView(ResultTable);

        BusinessQueryButton.setText("Execute Business Query");
        BusinessQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BusinessQueryButtonActionPerformed(evt);
            }
        });

        UserQueryButton.setText("Execute User Query");
        UserQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserQueryButtonActionPerformed(evt);
            }
        });

        BusinessComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        UserComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(BusinessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UserPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(BusinessComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(UserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(BusinessQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(UserQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(ReviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(BusinessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BusinessComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(UserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BusinessQueryButton)
                    .addComponent(UserQueryButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GetSubCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetSubCategoryButtonActionPerformed
        try {
            // TODO add your handling code here:
            getSubCategory();
        } catch (SQLException ex) {
            Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GetSubCategoryButtonActionPerformed

    private void GetAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetAttributeButtonActionPerformed
        try {
            getAttribute();
        } catch (SQLException ex) {
            Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GetAttributeButtonActionPerformed

    private String BusinessQuery() {
        if(Category_Set.size() > 0){
            String combobox = (String) BusinessComboBox.getSelectedItem();
            String query = "SELECT * FROM BUSINESS b WHERE b.BUSINESS_ID IN ((SELECT c.BUSINESS_ID FROM CATEGORIES c WHERE c.CATEGORY IN(";
            String c = "";
            for(String i : Category_Set){
                c += "'" + i + "', ";
            }
            c = c.substring(0, c.length()-2);
            query += c + ")";
            if(combobox.length() == 3){
                query += " GROUP BY c.BUSINESS_ID HAVING COUNT(*) >= " + Category_Set.size() + ")";
            }
            else{
                query += ")";
            }
            if(SubCategory_Set.size() > 0){
                c = "";
                for(String i : SubCategory_Set){
                    c += "'" + i + "', ";
                }
                c = c.substring(0, c.length()-2);
                query += " INTERSECT (SELECT sc.BUSINESS_ID FROM SUB_CATEGORIES sc WHERE sc.SUB_CATEGORY IN(" + c + ")";
                if(combobox.length() == 3){
                    query += " GROUP BY sc.BUSINESS_ID HAVING COUNT(*) >= " + SubCategory_Set.size() + ")";
                }
                else{
                    query += ")";
                }
            }
            if(Attribute_Set.size() > 0){
                c = "";
                for(String i : Attribute_Set){
                    c += "'" + i + "', ";
                }
                c = c.substring(0, c.length()-2);
                query += " INTERSECT (SELECT a.BUSINESS_ID FROM ATTRIBUTES a WHERE a.ATTRIBUTE IN(" + c + ")";
                if(combobox.length() == 3){
                    query += " GROUP BY a.BUSINESS_ID HAVING COUNT(*) >= " + Attribute_Set.size() + ")";
                }
                else{
                    query += ")";
                }
            }
            query += ")";
        return query;
        }
        else{
            return null;
        }
    }
    
    private String UserQuery() {
        String combobox = (String) UserComboBox.getSelectedItem();

        String query = "SELECT * FROM USERS u";
        String where = " WHERE ";
        Boolean isFirst = true;
        if(DateValidate(TextFieldMemberSince.getText())){
            where += "u.YELPING_SINCE >= TO_DATE('" + TextFieldMemberSince.getText() + "', 'YYYY-MM-DD') " + combobox + " ";
        }
        if(NumberValidate(TextFieldReviewCount.getText())){
            where += "u.REVIEW_COUNT " + ReviewCountComboBox.getSelectedItem() + " " + TextFieldReviewCount.getText() + " " + combobox + " ";
        }
        if(NumberValidate(TextFieldNumberFriends.getText())){
            where += "u.NUMBER_FRIEND " + NumberFriendsComboBox.getSelectedItem() + " " + TextFieldNumberFriends.getText() + " " + combobox + " ";
        }
        if(NumberValidate(AverageStarsTextField.getText())){
            where += "u.AVERAGE_STARS " + AverageStarsComboBox.getSelectedItem() + " " + AverageStarsTextField.getText() + " " + combobox + " ";
        }
        if(NumberValidate(TextFieldNumberVotes.getText())){
            where += "u.VOTE_COUNT " + NumberVotesComboBox.getSelectedItem() + " " + TextFieldNumberVotes.getText() + " " + combobox + " ";
        }
        if(where.length() > 7){
            if(combobox.length() == 3){
                where = where.substring(0, where.length()-5);
            }
            else{
                where = where.substring(0, where.length()-4);
            }
            query += where;
        }
    return query;
    }
    
    private void BusinessQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BusinessQueryButtonActionPerformed
        String query = BusinessQuery();
        System.out.println(query);
        isB = true;
        if(query != null){
            try {
                PreparedStatement stmt = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet result = stmt.executeQuery();
                result.last();
                ResultSetMetaData rsmd = result.getMetaData();
                int rc = result.getRow();
                int cc = rsmd.getColumnCount();
                String[] cName = new String[cc];
                String[][] resultData = new String[rc][cc];
                
                for(int i = 0; i < cc; i++){
                    cName[i] = rsmd.getColumnName(i+1);
                }
                result.beforeFirst();
                for(int i = 0; i < rc; i++){
                    result.next();
                    for(int j = 0; j < cc; j++){
                        resultData[i][j] = result.getString(j+1);
                    }
                }
                DefaultTableModel table = new DefaultTableModel(resultData, cName){
                    @Override
                    public boolean isCellEditable(int row, int column) {
                       //all cells false
                       return false;
                    }
                };
                
                ResultTable.setModel(table);
                ResultTable.removeColumn(ResultTable.getColumnModel().getColumn(0));

                if(!ListenerHasCreated){
                    ListenerHasCreated = true;
                    ResultTable.addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent e) {
                            if(e.getClickCount() == 2){
                                JTable target = (JTable)e.getSource();
                                String id = ResultTable.getModel().getValueAt(target.getSelectedRow(), 0).toString();
                                try {
                                    ShowReview(id);
                                } catch (SQLException ex) {
                                    Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                     });
                }
                result.close();
                stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "PLEASE SELECT AT LEAST ONE MAINCATEGORY");
        }
    }//GEN-LAST:event_BusinessQueryButtonActionPerformed

    private void UserQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserQueryButtonActionPerformed
        String query = UserQuery();
        System.out.println(query);
        isB = false;
        if(query != null){
            try {
                PreparedStatement stmt = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet result = stmt.executeQuery();
                result.last();
                ResultSetMetaData rsmd = result.getMetaData();
                int rc = result.getRow();
                int cc = rsmd.getColumnCount();
                String[] cName = new String[cc];
                String[][] resultData = new String[rc][cc];
                
                for(int i = 0; i < cc; i++){
                    cName[i] = rsmd.getColumnName(i+1);
                }
                result.beforeFirst();
                for(int i = 0; i < rc; i++){
                    result.next();
                    for(int j = 0; j < cc; j++){
                        resultData[i][j] = result.getString(j+1);
                    }
                }
                DefaultTableModel table = new DefaultTableModel(resultData, cName){
                    @Override
                    public boolean isCellEditable(int row, int column) {
                       //all cells false
                       return false;
                    }
                };
                
                ResultTable.setModel(table);
                ResultTable.removeColumn(ResultTable.getColumnModel().getColumn(0));
                if(!ListenerHasCreated){
                    ListenerHasCreated = true;
                    ResultTable.addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent e) {
                            if(e.getClickCount() == 2){
                                JTable target = (JTable)e.getSource();
                                String id = ResultTable.getModel().getValueAt(target.getSelectedRow(), 0).toString();
                                try {
                                    ShowReview(id);
                                } catch (SQLException ex) {
                                    Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                     });
                }
                result.close();
                stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(HW.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "PLEASE SELECT AT LEAST ONE MAINCATEGORY");
        }
    }//GEN-LAST:event_UserQueryButtonActionPerformed
    
    private Boolean DateValidate(String date){
        if(date == null){
            return false;
        } 
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(date.trim());
        } catch (ParseException e) {
            return false;
        }
        return true;
    }
    
    public static boolean NumberValidate(String number) {
        if(number == null){
            return false;
        }
        try {
          Double.parseDouble(number);  
          return true;
        } catch(NumberFormatException e){  
          return false;  
        }  
    }
    
    private void ShowReview(String b_id) throws SQLException{
        JFrame rFrame = new JFrame("Review");
        rFrame.setSize(500,600);
        rFrame.setLayout(new GridLayout(1,1));
        JTable rTable = new JTable(new DefaultTableModel());
        JScrollPane rScrollPane = new JScrollPane();
        rScrollPane.setViewportView(rTable);
        rFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        rFrame.setVisible(true);
        String query;
        if(isB){
            query = "SELECT u.name, r.R_DATE, r.TEXT, r.STAR, r.VOTE_COUNT FROM USERS u, REVIEW r WHERE r.USER_ID = u.USER_ID AND r.BUSINESS_ID = '" + b_id + "'";
        }
        else{
            query = "SELECT u.name, r.R_DATE, r.TEXT, r.STAR, r.VOTE_COUNT FROM USERS u, REVIEW r WHERE r.USER_ID = u.USER_ID AND r.USER_ID = '" + b_id + "'";
        }
        if(DateValidate(FromTextField.getText())){
            query += " AND r.R_DATE >= TO_DATE('" + FromTextField.getText() + "', 'YYYY-MM-DD')";
        }
        if(DateValidate(ToTextField.getText())){
            query += " AND r.R_DATE <= TO_DATE('" + ToTextField.getText() + "', 'YYYY-MM-DD')";
        }
        if(NumberValidate(StarTextField.getText())){
            query += " AND r.STAR " + (String) StarComboBox.getSelectedItem() + " " + StarTextField.getText();
        }
        if(NumberValidate(VotesTextField.getText())){
            query += " AND r.VOTE_COUNT " + (String) VotesComboBox.getSelectedItem() + " " + VotesTextField.getText();
        }
        System.out.println(query);
        PreparedStatement stmt = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet result = stmt.executeQuery();
        result.last();
        ResultSetMetaData rsmd = result.getMetaData();
        int rc = result.getRow();
        int cc = rsmd.getColumnCount();
        String[] cName = new String[cc];
        String[][] resultData = new String[rc][cc];
        for(int i = 0; i < cc; i++){
            cName[i] = rsmd.getColumnName(i+1);
        }
        result.beforeFirst();
        for(int i = 0; i < rc; i++){
            result.next();
            for(int j = 0; j < cc; j++){
                resultData[i][j] = result.getString(j+1);
            }
        }
        DefaultTableModel table = new DefaultTableModel(resultData, cName){
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        result.close();
        stmt.close();
        rTable.setModel(table);
        rFrame.add(rScrollPane);
    }
    
    private void getAttribute() throws SQLException {
        AttrPanel.removeAll();
        Attribute_Set.clear();
        if(SubCategory_Set.size() > 0 && SubCategory_Set.size() > 0){
            String combobox = (String) BusinessComboBox.getSelectedItem();
            String Cate = "";
            String query = "SELECT DISTINCT a.ATTRIBUTE FROM ATTRIBUTES a WHERE a.BUSINESS_ID IN ((SELECT c.BUSINESS_ID FROM CATEGORIES c WHERE c.CATEGORY IN(";
            String c = "";
            for(String i : Category_Set){
                c += "'" + i + "', ";
            }
            c = c.substring(0, c.length()-2);
            query += c + ")";
            if(combobox.length() == 3){
                query += " GROUP BY c.BUSINESS_ID HAVING COUNT(*) >= " + Category_Set.size() + ")";
            }
            else{
                query += ")";
            }
            c = "";
            for(String i : SubCategory_Set){
                c += "'" + i + "', ";
            }
            c = c.substring(0, c.length()-2);
            query += " INTERSECT (SELECT sc.BUSINESS_ID FROM SUB_CATEGORIES sc WHERE sc.SUB_CATEGORY IN(" + c + ")";
            if(combobox.length() == 3){
                query += " GROUP BY sc.BUSINESS_ID HAVING COUNT(*) >= " + SubCategory_Set.size() + ")";
            }
            else{
                query += ")";
            }
            query += ")";
            System.out.println(query);
            PreparedStatement stmt = con.prepareStatement(query);
            ResultSet result = stmt.executeQuery();
            
            while(result.next()){
                String Attribute = result.getString(result.findColumn("ATTRIBUTE"));
                JCheckBox attributeBox = new JCheckBox(Attribute);
                attributeBox.addMouseListener(new MouseListener(){
                    @Override
                    public void mouseClicked(MouseEvent arg0) {
                        JCheckBox box2 = (JCheckBox) arg0.getSource();
                        if(box2.isSelected()){
                            Attribute_Set.add(box2.getText());
                            System.out.println("now");
                        }
                        else{
                            Attribute_Set.remove(box2.getText());
                            System.out.println("now");
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent arg0) {
                    }

                    @Override
                    public void mouseReleased(MouseEvent arg0) {
                    }

                    @Override
                    public void mouseEntered(MouseEvent arg0) {
                    }

                    @Override
                    public void mouseExited(MouseEvent arg0) {
                    }

                });
                AttrPanel.add(attributeBox);
            }
            AttrPanel.updateUI();
        result.close();
        stmt.close();
        }
        else{
            JOptionPane.showMessageDialog(null, "PLEASE SELECT AT LEAST ONE MAINCATEGORY AND SUBCATEGORY");
                return;
        }
    }
    
    private void getSubCategory() throws SQLException {
        AttrPanel.removeAll();
        Attribute_Set.clear();
        AttrPanel.updateUI();
        SubCatePanel.removeAll();
        SubCategory_Set.clear();
        if(Category_Set.size() > 0){
            String combobox = (String) BusinessComboBox.getSelectedItem();
            String q = "SELECT DISTINCT sc.SUB_CATEGORY FROM SUB_CATEGORIES sc WHERE sc.BUSINESS_ID IN (SELECT c.BUSINESS_ID FROM CATEGORIES c WHERE c.CATEGORY IN (";
            String c = "";
            for(String i : Category_Set){
                c += "'" + i + "', ";
            }
            c = c.substring(0, c.length()-2);
            if(combobox.length() == 3){
                q += c + ") GROUP BY c.BUSINESS_ID HAVING COUNT(*) >= " + Category_Set.size() + ") ORDER BY sc.SUB_CATEGORY";
            }
            else{
                q += c + ")) ORDER BY sc.SUB_CATEGORY";
            }
            System.out.println(q);
            PreparedStatement stmt = con.prepareStatement(q);
            ResultSet result = stmt.executeQuery();
            
            while(result.next()){
                String SubCategory = result.getString(result.findColumn("SUB_CATEGORY"));
                JCheckBox subcategoryBox = new JCheckBox(SubCategory);
                subcategoryBox.addMouseListener(new MouseListener(){
                    @Override
                    public void mouseClicked(MouseEvent arg0) {
                        JCheckBox box1 = (JCheckBox) arg0.getSource();
                        if(box1.isSelected()){
                            SubCategory_Set.add(box1.getText());
                            System.out.println("now");
                        }
                        else{
                            SubCategory_Set.remove(box1.getText());
                            System.out.println("now");
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent arg0) {
                    }

                    @Override
                    public void mouseReleased(MouseEvent arg0) {
                    }

                    @Override
                    public void mouseEntered(MouseEvent arg0) {
                    }

                    @Override
                    public void mouseExited(MouseEvent arg0) {
                    }

                });
                SubCatePanel.add(subcategoryBox);
            }
            SubCatePanel.updateUI();
        result.close();
        stmt.close();
        }
        else{
            JOptionPane.showMessageDialog(null, "PLEASE SELECT AT LEAST ONE MAINCATEGORY");
                return;
        }
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HW().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AttrPanel;
    private javax.swing.JPanel AttributePanel;
    private javax.swing.JComboBox<String> AverageStarsComboBox;
    private javax.swing.JTextField AverageStarsTextField;
    private javax.swing.JComboBox<String> BusinessComboBox;
    private javax.swing.JPanel BusinessPanel;
    private javax.swing.JButton BusinessQueryButton;
    private javax.swing.JPanel CategoryPanel;
    private javax.swing.JTextField FromTextField;
    private javax.swing.JPanel FromToPanel;
    private javax.swing.JButton GetAttributeButton;
    private javax.swing.JButton GetSubCategoryButton;
    private javax.swing.JPanel MainCatePanel;
    private javax.swing.JComboBox<String> NumberFriendsComboBox;
    private javax.swing.JComboBox<String> NumberVotesComboBox;
    private javax.swing.JScrollPane ResultScrollPane;
    private javax.swing.JTable ResultTable;
    private javax.swing.JComboBox<String> ReviewCountComboBox;
    private javax.swing.JPanel ReviewPanel;
    private javax.swing.JComboBox<String> StarComboBox;
    private javax.swing.JPanel StarPanel;
    private javax.swing.JTextField StarTextField;
    private javax.swing.JPanel SubCatePanel;
    private javax.swing.JPanel SubCategoryPanel;
    private javax.swing.JTextField TextFieldMemberSince;
    private javax.swing.JTextField TextFieldNumberFriends;
    private javax.swing.JTextField TextFieldNumberVotes;
    private javax.swing.JTextField TextFieldReviewCount;
    private javax.swing.JTextField ToTextField;
    private javax.swing.JComboBox<String> UserComboBox;
    private javax.swing.JPanel UserPanel;
    private javax.swing.JButton UserQueryButton;
    private javax.swing.JComboBox<String> VotesComboBox;
    private javax.swing.JPanel VotesPanel;
    private javax.swing.JTextField VotesTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

}
